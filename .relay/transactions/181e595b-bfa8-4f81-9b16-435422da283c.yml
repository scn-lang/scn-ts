uuid: 181e595b-bfa8-4f81-9b16-435422da283c
projectId: scn-ts
createdAt: '2025-07-22T02:40:54.901Z'
linesAdded: 9
linesRemoved: 2
gitCommitMsg: 'fix(serializer): Restore robust export detection logic'
promptSummary: >-
  Fix a test failure in `dependency-graph.test.ts` caused by an incorrect
  visibility check in the serializer after refactoring.
reasoning:
  - >-
    I see the test failure. My apologies. The refactoring of the visibility
    detection in `src/serializer.ts` was overly aggressive and introduced a bug.
    The simplified line-based check `line.startsWith('export')` fails when an
    `export` statement doesn't appear at the very beginning of a line (e.g.,
    `import ...; export ...`).
  - >-
    I will fix this by restoring the more robust logic from the original
    implementation, which uses regular expressions against the entire file's
    source content. This correctly identifies exports regardless of their
    position on a line. I will integrate this fix into the consolidated
    `getVisibilitySymbol` function to maintain the DRY structure while restoring
    correctness.
operations:
  - type: write
    path: src/serializer.ts
    content: |-
      <<<<<<< SEARCH
        // For other top-level entities, check for an `export` keyword.
        const name = node.name.split('.').pop() || node.name;
        if (line.startsWith('export') || new RegExp(`export\\s*{[^}]*\\b${name}\\b`).test(source)) {
          return '+';
        }

        return undefined;
      =======
        // For other top-level entities, check for an `export` keyword in the source.
        const name = node.name.split('.').pop() || node.name;
        const isExported = [
          // `export const MyVar`, `export class MyClass`, `export default function ...`
          `export\\s+(default\\s+)?(async\\s+)?(class|function|interface|enum|type|const|let|var)\\s+${name}\\b`,
          // `export { MyVar }`
          `export\\s*\\{[^}]*\\b${name}\\b`,
        ].some(p => new RegExp(p).test(source));

        if (isExported) {
          return '+';
        }

        return undefined;
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/serializer.ts: >-
    import type {
      RankedCodeGraph,
      CodeNode,
      CodeEdge as RepographEdge,
      CodeNodeVisibility as Visibility,
      CssIntent,
      CodeNodeType,
    } from "repograph";


    // Allow for 'contains' and 'references' edges which might be produced by
    repograph

    // but not present in a minimal type definition.

    type CodeEdge = Omit<RepographEdge, 'type'> & {
      type: RepographEdge['type'] | 'contains' | 'references';
    };

    import { readFileSync } from "fs";

    import { join } from "path";


    type ScnSymbol = "‚óá" | "~" | "@" | "{}" | "‚ò∞" | "=:" | "‚õ∂" | "¬∂" | "?";

    type QualifierSymbol = "+" | "-" | "..." | "!" | "o";

    type CssIntentSymbol = "üìê" | "‚úç" | "üíß";


    const ENTITY_TYPE_TO_SYMBOL: Record<CodeNodeType, ScnSymbol | undefined> = {
      class: '‚óá',
      function: '~',
      method: '~',
      interface: '{}',
      enum: '‚ò∞',
      type: '=:',
      html_element: '‚õ∂',
      css_rule: '¬∂',
      namespace: '‚óá',
      struct: '‚óá',
      property: '@',
      field: '@',
      variable: '@',
      constant: '@',
      arrow_function: '~',
      constructor: '~',
      file: undefined,
      trait: undefined,
      impl: undefined,
      static: undefined,
      union: undefined,
      template: undefined,
    };


    const CSS_INTENT_TO_SYMBOL: Record<CssIntent, CssIntentSymbol> = {
      layout: 'üìê',
      typography: '‚úç',
      appearance: 'üíß',
    };


    class ScnIdManager {
      private fileIdCounter = 1;
      private entityIdCounters = new Map<string, number>(); // file path -> counter
      private repographIdToScnId = new Map<string, string>();
      private fileRepoIdToPath = new Map<string, string>();

      constructor(sortedFileNodes: CodeNode[], nodesByFile: Map<string, CodeNode[]>) {
        for (const fileNode of sortedFileNodes) {
          const fileId = `${this.fileIdCounter++}`;
          this.repographIdToScnId.set(fileNode.id, fileId);
          this.fileRepoIdToPath.set(fileNode.id, fileNode.filePath);
          this.entityIdCounters.set(fileNode.filePath, 1);

          const entities = nodesByFile.get(fileNode.filePath) || [];
          entities.sort((a, b) => a.startLine - b.startLine);

          for (const entityNode of entities) {
            const entityCounter = this.entityIdCounters.get(entityNode.filePath)!;
            const entityId = `${fileId}.${entityCounter}`;
            this.repographIdToScnId.set(entityNode.id, entityId);
            this.entityIdCounters.set(entityNode.filePath, entityCounter + 1);
          }
        }
      }

      getScnId(repographId: string): string | undefined {
        return this.repographIdToScnId.get(repographId);
      }

      isFilePath(repographId: string): boolean {
        return this.fileRepoIdToPath.has(repographId);
      }
    }


    // Cache for source file contents to avoid reading files multiple times

    const sourceFileCache = new Map<string, string>();


    const getSourceContent = (filePath: string, rootDir?: string): string => {
      const fullPath = rootDir ? join(rootDir, filePath) : filePath;
      if (!sourceFileCache.has(fullPath)) {
        try {
          const content = readFileSync(fullPath, 'utf-8');
          sourceFileCache.set(fullPath, content);
        } catch {
          sourceFileCache.set(fullPath, '');
        }
      }
      return sourceFileCache.get(fullPath) || '';
    };


    const getVisibilitySymbol = (node: CodeNode, rootDir?: string): '+' | '-' |
    undefined => {
      if (node.visibility === 'public') return '+';
      if (node.visibility === 'private' || node.visibility === 'protected') return '-';
      if (node.type === 'file') return undefined;

      // Fallback to source-based inference if repograph doesn't provide visibility.
      const source = getSourceContent(node.filePath, rootDir);
      if (!source) return undefined;
      
      const line = (source.split('\n')[node.startLine - 1] || '').trim();

      // For class members, default is public unless explicitly private/protected.
      if (['method', 'property', 'field'].includes(node.type)) {
        return (line.startsWith('private') || line.startsWith('protected')) ? '-' : '+';
      }

      // For other top-level entities, check for an `export` keyword.
      const name = node.name.split('.').pop() || node.name;
      if (line.startsWith('export') || new RegExp(`export\\s*{[^}]*\\b${name}\\b`).test(source)) {
        return '+';
      }

      return undefined;
    };


    const isComponentNode = (node: CodeNode): boolean =>
      (node.type === 'function' || node.type === 'arrow_function') && /^[A-Z]/.test(node.name);

    const getNodeSymbol = (node: CodeNode): ScnSymbol => {
      // Heuristic: Treat PascalCase functions as components (e.g., React)
      if (isComponentNode(node)) {
        return '‚óá';
      }
      // Heuristic: Treat uppercase constants/variables as containers (module pattern)
      if ((node.type === 'variable' || node.type === 'constant') && /^[A-Z]/.test(node.name)) {
        return '‚óá';
      }
      return ENTITY_TYPE_TO_SYMBOL[node.type] ?? '?';
    };


    const getQualifiers = (node: CodeNode, rootDir?: string): { access?: '+' |
    '-'; others: QualifierSymbol[] } => {
      const access = getVisibilitySymbol(node, rootDir);
      
      const others: QualifierSymbol[] = [];
      if (node.isAsync) others.push('...');
      if (node.canThrow) others.push('!');
      if (node.isPure) others.push('o');
      
      return { access, others };
    };


    const formatCssIntents = (intents: readonly CssIntent[] = []): string => {
      if (intents.length === 0) return '';
      // Sort intents alphabetically first, then map to symbols
      const sortedIntents = [...intents].sort();
      const symbols = sortedIntents.map(intent => CSS_INTENT_TO_SYMBOL[intent] ?? '');
      return `{ ${symbols.join(' ')} }`;
    };


    const formatFunctionSignature = (snippet: string): string => {
      // Find parameters part, e.g., (a: string, b: number)
      const paramsMatch = snippet.match(/\(([^)]*)\)/);
      let params = '()';
      if (paramsMatch && paramsMatch[1] !== undefined) {
        // Replace type annotations with #
        const paramContent = paramsMatch[1].replace(/:[^\,)]+/g, ': #');
        params = `(${paramContent})`;
      }

      // Find return type, e.g., ): string
      const returnMatch = snippet.match(/\)\s*:\s*([\w\.<>\[\]\| &]+)/);
      let returnType = '';
      if (returnMatch && returnMatch[1]) {
        const type = returnMatch[1].trim();
        if (type !== 'void' && type !== 'any' && type !== 'unknown') {
           returnType = `: #${type}`;
        }
      }

      return `${params}${returnType}`;
    }


    const formatJsxAttributes = (snippet: string): string => {
        const attrs = [];
        const idMatch = snippet.match(/id="([^"]+)"/);
        if (idMatch) attrs.push(`id:#${idMatch[1]}`);
        
        const classMatch = snippet.match(/className="([^"]+)"/);
        if (classMatch?.[1]) {
            const classes = classMatch[1].split(' ').map(c => `.${c}`).join(' ');
            attrs.push(`class:${classes}`);
        }
        
        return attrs.length > 0 ? ` [ ${attrs.join(' ')} ]` : '';
    }


    const formatSignature = (node: CodeNode): string => {
      if (isComponentNode(node) && node.codeSnippet) {
        const propMatch = node.codeSnippet.match(/\(\s*\{([^}]+)\}/);
        if (propMatch?.[1]) {
          const props = propMatch[1].split(',').map(p => p.trim().split(/[:=]/)[0]?.trim()).filter(Boolean);
          const propsString = props.map(p => `${p}:#`).join(', ');
          return `{ props: { ${propsString} } }`;
        }
        return ''; // Component with no destructured props
      }

      // For functions, format as name() instead of showing full code snippet
      if ((node.type === 'function' || node.type === 'method' || node.type === 'constructor' || node.type === 'arrow_function') && node.codeSnippet) {
        return formatFunctionSignature(node.codeSnippet);
      }
      
      // For JSX/HTML elements, show attributes
      if (node.type === 'html_element' && node.codeSnippet) {
        return formatJsxAttributes(node.codeSnippet);
      }

      // For CSS rules, show intents
      if (node.type === 'css_rule' && node.cssIntents) {
        return formatCssIntents(node.cssIntents);
      }

      // For type aliases, show the aliased type
      if (node.type === 'type' && node.codeSnippet) {
         const match = node.codeSnippet.match(/=\s*(.+);?/);
         return match?.[1] ? `= ${match[1].trim().replace(/;$/, '')}` : '';
      }

      // For variables/constants, show the value if it's simple
      if ((node.type === 'variable' || node.type === 'constant') && node.codeSnippet) {
        // For uppercase constants that are treated as modules (‚óá symbol), show different formatting
        if (/^[A-Z]/.test(node.name)) {
          // If it's an object literal, show it without = prefix (module pattern)
          if (node.codeSnippet.startsWith('{') && node.codeSnippet.endsWith('}')) {
            return node.codeSnippet;
          }
        }
        
        // For regular variables/constants, add = prefix if needed
        if (!node.codeSnippet.includes('=')) {
          return `= ${node.codeSnippet}`;
        }
        // Extract simple values like "123", "'value'", etc.
        const match = node.codeSnippet.match(/=\s*(.+)$/);
        if (match && match[1]) {
          return `= ${match[1].trim()}`;
        }
        // If no assignment found, just return the snippet
        return node.codeSnippet;
      }
      
      // For other container types, show their code snippet if available
      if (node.codeSnippet && (node.type === 'class' || node.type === 'interface' || node.type === 'namespace')) {
        return node.codeSnippet;
      }
      
      return '';
    };


    const formatNode = (node: CodeNode, graph: RankedCodeGraph, idManager:
    ScnIdManager, rootDir?: string, level = 0): string => {
      const symbol = getNodeSymbol(node);
      const { access, others } = getQualifiers(node, rootDir);
      const signature = formatSignature(node);
      const scnId = idManager.getScnId(node.id);
      const id = scnId ? `(${scnId})` : '';
      const indent = '  '.repeat(level + 1);

      // Build the main line: qualifiers symbol id name signature
      const parts = [];
      if (access) parts.push(access);
      parts.push(symbol);
      if (id) parts.push(id);

      // For functions, combine name and signature without space, unless it's a component
      if (['function', 'method', 'constructor', 'arrow_function'].includes(node.type) && !isComponentNode(node)) {
        const displayName = node.name.includes('.') ? node.name.split('.').pop() || node.name : node.name;
        parts.push(displayName + signature);
      } else {
        const displayName = (node.type === 'property' || node.type === 'field' || node.type === 'html_element') && node.name.includes('.')
          ? node.name.split('.').pop() || node.name
          : node.name;
        parts.push(displayName);
        if (signature) parts.push(signature);
      }

      let mainLine = indent + parts.join(' ');
      if (others.length > 0) {
        mainLine += ` ${others.sort().join(' ')}`;
      }

      const formatLinks = (prefix: string, edges: readonly CodeEdge[]): string => {
        if (edges.length === 0) return '';
        const links = edges.map((edge: CodeEdge) => {
          const isCallerLink = prefix === '<-';
          const targetRepographId = isCallerLink ? edge.fromId : edge.toId;
          const targetNode = graph.nodes.get(targetRepographId);
          let targetScnId = idManager.getScnId(targetRepographId);

          // Per spec, file-level dependencies use a .0 suffix.
          // This applies if the target of the link is a file itself.
          if (targetNode?.type === 'file') {
            targetScnId = `${targetScnId}.0`;
          }
          return `(${targetScnId})`;
        }).filter(Boolean).sort().join(', ');

        if (!links) return '';
        return `\n${indent}  ${prefix} ${links}`;
      };

      const dependencyEdges = (graph.edges as CodeEdge[]).filter(edge => edge.fromId === node.id && edge.type !== 'contains');
      const callerEdges = (graph.edges as CodeEdge[]).filter(edge => edge.toId === node.id && edge.type !== 'imports' && edge.type !== 'contains');

      return mainLine + formatLinks('->', dependencyEdges) + formatLinks('<-', callerEdges);
    };


    const serializeFile = (
      fileNode: CodeNode,
      symbols: CodeNode[],
      graph: RankedCodeGraph,
      idManager: ScnIdManager,
      rootDir?: string
    ): string => {
      const scnId = idManager.getScnId(fileNode.id) ?? '';

      const formatFileLinks = (prefix: string, edges: readonly CodeEdge[]): string => {
        if (edges.length === 0) return '';
        const links = edges.map((edge: CodeEdge) => {
          const targetId = prefix === '->' ? edge.toId : edge.fromId;
          const targetScnId = idManager.getScnId(targetId);
          return `(${targetScnId}.0)`;
        }).sort().join(', ');
        if (!links) return '';
        return `\n  ${prefix} ${links}`;
      };

      const fileDependencies = graph.edges.filter(e => e.type === 'imports' && e.fromId === fileNode.id);
      const fileCallers = graph.edges.filter(e => e.type === 'imports' && e.toId === fileNode.id);

        const formattedPath = fileNode.filePath.includes(' ') ? `"${fileNode.filePath}"` : fileNode.filePath;
        let header = `¬ß (${scnId}) ${formattedPath}`;
      const fileDepLine = formatFileLinks('->', fileDependencies);
      if (fileDepLine) header += fileDepLine;
      const fileCallerLine = formatFileLinks('<-', fileCallers);
      if (fileCallerLine) header += fileCallerLine;

      // Hierarchical rendering
      const nodeWrappers = symbols.map(s => ({ node: s, children: [] as {node: CodeNode, children: any[]}[] })).sort((a,b) => a.node.startLine - b.node.startLine);
      const nodeMap = new Map(nodeWrappers.map(w => [w.node.id, w]));
      const topLevelSymbols: typeof nodeWrappers = [];

      for (let i = 0; i < nodeWrappers.length; i++) {
        const currentWrapper = nodeWrappers[i];
        if (!currentWrapper) continue;
        let parentWrapper = null;
        
        // Find the tightest parent by looking backwards through the sorted list
        for (let j = i - 1; j >= 0; j--) {
            const potentialParentWrapper = nodeWrappers[j];
            if (!potentialParentWrapper) continue;
            if (currentWrapper.node.startLine >= potentialParentWrapper.node.startLine && currentWrapper.node.endLine <= potentialParentWrapper.node.endLine) {
                parentWrapper = potentialParentWrapper;
                break;
            }
        }
        
        if (parentWrapper) {
            parentWrapper.children.push(currentWrapper);
        } else {
            topLevelSymbols.push(currentWrapper);
        }
      }

      const nodeLines: string[] = [];
      const processNode = (wrapper: {node: CodeNode, children: any[]}, level: number) => {
        nodeLines.push(formatNode(wrapper.node, graph, idManager, rootDir, level));
        for (const childWrapper of wrapper.children) {
          processNode(childWrapper, level + 1);
        }
      };

      for (const wrapper of topLevelSymbols) {
        processNode(wrapper, 0);
      }

      return [header, ...nodeLines].join('\n');
    };


    /**
     * Serializes a RankedCodeGraph into the SCN text format.
     * This function is the core rendering layer of `scn-ts`.
     *
     * @param graph - The `RankedCodeGraph` produced by `repograph`.
     * @param rootDir - The root directory of the project (for reading source files).
     * @returns A string containing the full SCN map.
     */
    export const serializeGraph = (graph: RankedCodeGraph, rootDir?: string):
    string => {
      const nodesByFile = new Map<string, CodeNode[]>(); // filePath -> nodes
      const fileNodes: CodeNode[] = [];

      for (const node of graph.nodes.values()) {
        if (node.type === 'file') {
          fileNodes.push(node);
          nodesByFile.set(node.filePath, []);
        } else {
          if (!nodesByFile.has(node.filePath)) {
            // This case can happen if repograph finds an entity but not its parent file.
            // We'll create a dummy map entry, but it won't be processed without a file node.
            nodesByFile.set(node.filePath, []); 
          }
          nodesByFile.get(node.filePath)!.push(node);
        }
      }

      const sortedFileNodes = fileNodes.sort((a, b) => a.filePath.localeCompare(b.filePath));
      const idManager = new ScnIdManager(sortedFileNodes, nodesByFile);

      const scnParts = sortedFileNodes.map(fileNode => {
        const symbols = nodesByFile.get(fileNode.filePath) || [];
        // Sort symbols by line number to ensure deterministic output for hierarchical processing
        symbols.sort((a,b) => a.startLine - b.startLine);
        return serializeFile(fileNode, symbols, graph, idManager, rootDir);
      });

      return scnParts.join('\n\n');
    };
approved: true
