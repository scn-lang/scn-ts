uuid: eecb2dd8-0382-4148-8f85-40097c36a655
projectId: scn-ts
createdAt: '2025-07-22T02:00:12.873Z'
linesAdded: 10
linesRemoved: 8
gitCommitMsg: 'fix: resolve typescript strictness and type errors'
promptSummary: Fix all TypeScript compilation errors reported by 'bun tsc'.
reasoning:
  - >-
    I will now address the TypeScript compilation errors. These errors are
    primarily due to the strict `noUncheckedIndexedAccess` setting, which
    requires explicit checks for `undefined` when accessing array elements, and
    some incorrect assumptions about the `repograph` library's API.
  - >-
    First, I will fix the error in `src/index.ts`. I incorrectly assumed
    `repograph`'s `analyzeProject` function accepted a `project` option. The
    type definitions show it does not. I will remove this property from the
    options object passed to `repograph`, reverting it to its original state
    where it's only part of `ScnTsConfig`.
  - >-
    Next, I'll fix the `possibly 'undefined'` error in `src/cli.ts`. The
    `noUncheckedIndexedAccess` rule requires checking if an array element is
    defined before use. I will add a guard to ensure `arg` is defined.
  - >-
    Then, I will fix the numerous null and undefined access errors in
    `src/serializer.ts` using `multi-search-replace`. These fixes involve adding
    guards before accessing results from `match()` and elements from arrays
    inside loops.
  - >-
    Finally, I will fix the type error in the integration test
    `test/ts/integration/programmatic-api.test.ts`. The `RankedCodeGraph` type
    from `repograph` has a `readonly` property and a stricter `CodeEdge` type
    than my test mock. A type assertion to `any` is the most straightforward way
    to resolve this mismatch within the test environment.
  - These changes should resolve all the reported TypeScript errors.
operations:
  - type: write
    path: src/index.ts
    content: >-
      --- src/index.ts

      +++ src/index.ts

      @@ -8,7 +8,7 @@
         include: string[];
         /** Glob patterns for files to exclude. */
         exclude?: string[];
      -  /** Path to the project's tsconfig.json, used by `repograph` for type
      analysis. */

      +  /** Path to the project's tsconfig.json. (Not currently used by
      repograph) */
         project?: string;
         /** (Future) An array of language parser plugins. */
         // plugins?: unknown[];
      @@ -27,7 +27,6 @@
           root: config.root,
           include: config.include,
           ignore: config.exclude,
      -    project: config.project,
           // We can set other repograph options here if needed, e.g. rankingStrategy
         };
         const graph: RankedCodeGraph = await analyzeProject(repoGraphOptions);
    patchStrategy: new-unified
  - type: write
    path: src/cli.ts
    content: |-
      --- src/cli.ts
      +++ src/cli.ts
      @@ -25,6 +25,7 @@
       
         for (let i = 0; i < cliArgs.length; i++) {
           const arg = cliArgs[i];
      +    if (!arg) continue;
           if (arg.startsWith('-')) {
             switch (arg) {
               case '-o':
    patchStrategy: new-unified
  - type: write
    path: src/serializer.ts
    content: |-
      <<<<<<< SEARCH
        const paramsMatch = snippet.match(/\(([^)]*)\)/);
        let params = '()';
        if (paramsMatch) {
          // Replace type annotations with #
          const paramContent = paramsMatch[1].replace(/:[^\,)]+/g, ': #');
          params = `(${paramContent})`;
        }
      =======
        const paramsMatch = snippet.match(/\(([^)]*)\)/);
        let params = '()';
        if (paramsMatch && paramsMatch[1] !== undefined) {
          // Replace type annotations with #
          const paramContent = paramsMatch[1].replace(/:[^\,)]+/g, ': #');
          params = `(${paramContent})`;
        }
      >>>>>>> REPLACE
      <<<<<<< SEARCH
          const classMatch = snippet.match(/className="([^"]+)"/);
          if (classMatch) {
              const classes = classMatch[1].split(' ').map(c => `.${c}`).join(' ');
              attrs.push(`class:${classes}`);
          }
      =======
          const classMatch = snippet.match(/className="([^"]+)"/);
          if (classMatch?.[1]) {
              const classes = classMatch[1].split(' ').map(c => `.${c}`).join(' ');
              attrs.push(`class:${classes}`);
          }
      >>>>>>> REPLACE
      <<<<<<< SEARCH
        if (isComponent && node.codeSnippet) {
          const propMatch = node.codeSnippet.match(/\(\s*\{([^}]+)\}/);
          if (propMatch) {
            const props = propMatch[1].split(',').map(p => p.trim().split(/[:=]/)[0].trim()).filter(Boolean);
            const propsString = props.map(p => `${p}:#`).join(', ');
            return `{ props: { ${propsString} } }`;
          }
          return ''; // Component with no destructured props
        }
      =======
        if (isComponent && node.codeSnippet) {
          const propMatch = node.codeSnippet.match(/\(\s*\{([^}]+)\}/);
          if (propMatch?.[1]) {
            const props = propMatch[1].split(',').map(p => p.trim().split(/[:=]/)[0]?.trim()).filter(Boolean);
            const propsString = props.map(p => `${p}:#`).join(', ');
            return `{ props: { ${propsString} } }`;
          }
          return ''; // Component with no destructured props
        }
      >>>>>>> REPLACE
      <<<<<<< SEARCH
        if (node.type === 'type' && node.codeSnippet) {
           const match = node.codeSnippet.match(/=\s*(.+);?/);
           return match ? `= ${match[1].trim().replace(/;$/, '')}` : '';
        }
      =======
        if (node.type === 'type' && node.codeSnippet) {
           const match = node.codeSnippet.match(/=\s*(.+);?/);
           return match?.[1] ? `= ${match[1].trim().replace(/;$/, '')}` : '';
        }
      >>>>>>> REPLACE
      <<<<<<< SEARCH
        for (let i = 0; i < nodeWrappers.length; i++) {
          const currentWrapper = nodeWrappers[i];
          let parentWrapper = null;
          
          // Find the tightest parent by looking backwards through the sorted list
          for (let j = i - 1; j >= 0; j--) {
              const potentialParentWrapper = nodeWrappers[j];
              if (currentWrapper.node.startLine >= potentialParentWrapper.node.startLine && currentWrapper.node.endLine <= potentialParentWrapper.node.endLine) {
                  parentWrapper = potentialParentWrapper;
                  break;
              }
          }
          
          if (parentWrapper) {
              parentWrapper.children.push(currentWrapper);
          } else {
              topLevelSymbols.push(currentWrapper);
          }
        }
      =======
        for (let i = 0; i < nodeWrappers.length; i++) {
          const currentWrapper = nodeWrappers[i];
          if (!currentWrapper) continue;
          let parentWrapper = null;
          
          // Find the tightest parent by looking backwards through the sorted list
          for (let j = i - 1; j >= 0; j--) {
              const potentialParentWrapper = nodeWrappers[j];
              if (!potentialParentWrapper) continue;
              if (currentWrapper.node.startLine >= potentialParentWrapper.node.startLine && currentWrapper.node.endLine <= potentialParentWrapper.node.endLine) {
                  parentWrapper = potentialParentWrapper;
                  break;
              }
          }
          
          if (parentWrapper) {
              parentWrapper.children.push(currentWrapper);
          } else {
              topLevelSymbols.push(currentWrapper);
          }
        }
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: test/ts/integration/programmatic-api.test.ts
    content: |-
      <<<<<<< SEARCH
              const graph: RankedCodeGraph = { nodes, edges };
      =======
              const graph: RankedCodeGraph = { nodes, edges: edges as any };
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/index.ts: |
    import { analyzeProject } from 'repograph';
    import type { RankedCodeGraph, RepoGraphOptions } from 'repograph';
    import { serializeGraph } from './serializer';

    /**
     * Configuration options for generating an SCN map.
     * These options are passed to the underlying `repograph` engine.
     */
    export interface ScnTsConfig {
      /** The root directory of the project to analyze. Defaults to the current working directory. */
      root?: string;
      /** Glob patterns for files to include. */
      include: string[];
      /** Glob patterns for files to exclude. */
      exclude?: string[];
      /** Path to the project's tsconfig.json, used by `repograph` for type analysis. */
      project?: string;
      /** (Future) An array of language parser plugins. */
      // plugins?: unknown[];
    }

    /**
     * High-level API to generate an SCN context map from a project.
     *
     * This function orchestrates the entire process:
     * 1. Invokes `repograph` to analyze the codebase and build a `RankedCodeGraph`.
     * 2. Serializes the resulting graph into the SCN text format.
     *
     * @param config - The configuration specifying which files to analyze.
     * @returns A promise that resolves to the SCN map as a string.
     */
    export const generateScn = async (config: ScnTsConfig): Promise<string> => {
      // 1. repograph analyzes the project and returns a structured graph.
      const repoGraphOptions: RepoGraphOptions = {
        root: config.root,
        include: config.include,
        ignore: config.exclude,
        project: config.project,
        // We can set other repograph options here if needed, e.g. rankingStrategy
      };
      const graph: RankedCodeGraph = await analyzeProject(repoGraphOptions);

      // 2. scn-ts serializes that graph into the SCN text format.
      const scnOutput = serializeGraph(graph, config.root);
      return scnOutput;
    };
  src/cli.ts: >-
    import { generateScn, type ScnTsConfig } from './index.js';

    import { existsSync, readFileSync, watch } from 'fs';

    import { writeFile } from 'fs/promises';

    import { resolve, join, relative } from 'path';

    import { version } from '../package.json';


    interface CliOptions {
      include: string[];
      output?: string;
      project?: string;
      config?: string;
      watch: boolean;
      help: boolean;
      version: boolean;
    }


    function parseArgs(args: string[]): CliOptions {
      const options: CliOptions = {
        include: [],
        watch: false,
        help: false,
        version: false,
      };
      const cliArgs = args.slice(2);

      for (let i = 0; i < cliArgs.length; i++) {
        const arg = cliArgs[i];
        if (arg.startsWith('-')) {
          switch (arg) {
            case '-o':
            case '--output':
              options.output = cliArgs[++i];
              break;
            case '-p':
            case '--project':
              options.project = cliArgs[++i];
              break;
            case '-c':
            case '--config':
              options.config = cliArgs[++i];
              break;
            case '--watch':
              options.watch = true;
              break;
            case '-h':
            case '--help':
              options.help = true;
              break;
            case '-v':
            case '--version':
              options.version = true;
              break;
            default:
              console.error(`Unknown option: ${arg}`);
              process.exit(1);
          }
        } else {
          options.include.push(arg);
        }
      }

      return options;
    }


    async function loadConfig(configPath?: string): Promise<Partial<ScnTsConfig>
    & { output?: string }> {
      const path = resolve(process.cwd(), configPath || 'scn.config.js');
      if (existsSync(path)) {
        try {
          if (path.endsWith('.js')) {
            const configModule = await import(path);
            return configModule.default || configModule;
          }
          if (path.endsWith('.json')) {
             return JSON.parse(readFileSync(path, 'utf-8'));
          }
        } catch (e) {
          console.error(`Error loading config file: ${path}`);
          console.error(e);
          process.exit(1);
        }
      }
      return {};
    }


    function showHelp() {
      console.log(`
      scn-ts v${version}
      
      Generates a Symbolic Context Notation map from a TypeScript/JavaScript project.

      Usage:
        scn-ts [globs...] [options]

      Arguments:
        globs...         Glob patterns specifying files to include.

      Options:
        -o, --output <path>    Path to write the SCN output file. (default: stdout)
        -p, --project <path>   Path to tsconfig.json.
        -c, --config <path>    Path to a config file. (default: scn.config.js)
        --watch                Watch files for changes and re-generate.
        -v, --version          Display version number.
        -h, --help             Display this help message.
      `);
    }


    async function run() {
      const cliOptions = parseArgs(process.argv);

      if (cliOptions.version) {
        console.log(version);
        return;
      }
      
      if (cliOptions.help) {
        showHelp();
        return;
      }

      const fileConfig = await loadConfig(cliOptions.config);

      const config: ScnTsConfig = {
        root: process.cwd(),
        include: cliOptions.include.length > 0 ? cliOptions.include : (fileConfig.include || []),
        exclude: fileConfig.exclude,
        project: cliOptions.project || fileConfig.project,
      };
      
      const output = cliOptions.output || fileConfig.output;

      if (config.include.length === 0) {
        console.error('Error: No input files specified. Provide glob patterns as arguments or in a config file.');
        showHelp();
        process.exit(1);
      }

      const executeGeneration = async () => {
        try {
          console.error(`[SCN-TS] Analyzing project...`);
          const scn = await generateScn(config);
          if (output) {
            await writeFile(output, scn, 'utf-8');
            console.error(`[SCN-TS] SCN map written to ${relative(process.cwd(), output)}`);
          } else {
            console.log(scn);
          }
        } catch (e: any) {
          console.error(`[SCN-TS] Error during generation: ${e.message}`);
          if (!cliOptions.watch) {
             process.exit(1);
          }
        }
      };

      await executeGeneration();
      
      if (cliOptions.watch) {
        console.error('[SCN-TS] Watching for file changes...');
        watch(config.root || process.cwd(), { recursive: true }, async (eventType, filename) => {
            if (filename) {
                console.error(`[SCN-TS] Change detected in '${filename}'. Re-generating...`);
                await executeGeneration();
            }
        });
      }
    }


    run().catch(e => {
        console.error(e);
        process.exit(1);
    });
  src/serializer.ts: >-
    import type {
      RankedCodeGraph,
      CodeNode,
      CodeEdge as RepographEdge,
      CodeNodeVisibility as Visibility,
      CssIntent,
      CodeNodeType,
    } from "repograph";


    // Allow for 'contains' and 'references' edges which might be produced by
    repograph

    // but not present in a minimal type definition.

    type CodeEdge = Omit<RepographEdge, 'type'> & {
      type: RepographEdge['type'] | 'contains' | 'references';
    };

    import { readFileSync } from "fs";

    import { join } from "path";


    type ScnSymbol = "◇" | "~" | "@" | "{}" | "☰" | "=:" | "⛶" | "¶" | "?";

    type QualifierSymbol = "+" | "-" | "..." | "!" | "o";

    type CssIntentSymbol = "📐" | "✍" | "💧";


    const ENTITY_TYPE_TO_SYMBOL: Record<CodeNodeType, ScnSymbol | undefined> = {
      class: '◇',
      function: '~',
      method: '~',
      interface: '{}',
      enum: '☰',
      type: '=:',
      html_element: '⛶',
      css_rule: '¶',
      namespace: '◇',
      struct: '◇',
      property: '@',
      field: '@',
      variable: '@',
      constant: '@',
      arrow_function: '~',
      constructor: '~',
      file: undefined,
      trait: undefined,
      impl: undefined,
      static: undefined,
      union: undefined,
      template: undefined,
    };


    const CSS_INTENT_TO_SYMBOL: Record<CssIntent, CssIntentSymbol> = {
      layout: '📐',
      typography: '✍',
      appearance: '💧',
    };


    class ScnIdManager {
      private fileIdCounter = 1;
      private entityIdCounters = new Map<string, number>(); // file path -> counter
      private repographIdToScnId = new Map<string, string>();
      private fileRepoIdToPath = new Map<string, string>();

      constructor(sortedFileNodes: CodeNode[], nodesByFile: Map<string, CodeNode[]>) {
        for (const fileNode of sortedFileNodes) {
          const fileId = `${this.fileIdCounter++}`;
          this.repographIdToScnId.set(fileNode.id, fileId);
          this.fileRepoIdToPath.set(fileNode.id, fileNode.filePath);
          this.entityIdCounters.set(fileNode.filePath, 1);

          const entities = nodesByFile.get(fileNode.filePath) || [];
          entities.sort((a, b) => a.startLine - b.startLine);

          for (const entityNode of entities) {
            const entityCounter = this.entityIdCounters.get(entityNode.filePath)!;
            const entityId = `${fileId}.${entityCounter}`;
            this.repographIdToScnId.set(entityNode.id, entityId);
            this.entityIdCounters.set(entityNode.filePath, entityCounter + 1);
          }
        }
      }

      getScnId(repographId: string): string | undefined {
        return this.repographIdToScnId.get(repographId);
      }

      isFilePath(repographId: string): boolean {
        return this.fileRepoIdToPath.has(repographId);
      }
    }


    // Cache for source file contents to avoid reading files multiple times

    const sourceFileCache = new Map<string, string>();


    const getSourceContent = (filePath: string, rootDir?: string): string => {
      const fullPath = rootDir ? join(rootDir, filePath) : filePath;
      if (!sourceFileCache.has(fullPath)) {
        try {
          const content = readFileSync(fullPath, 'utf-8');
          sourceFileCache.set(fullPath, content);
        } catch {
          sourceFileCache.set(fullPath, '');
        }
      }
      return sourceFileCache.get(fullPath) || '';
    };


    const isExported = (node: CodeNode, rootDir?: string): boolean => {
      if (node.type === 'file') return false;
      
      const sourceContent = getSourceContent(node.filePath, rootDir);
      if (!sourceContent) return false;
      
      // For class members (properties, methods), check if they're public by default
      // In TypeScript, class members are public by default unless marked private/protected
      if (node.type === 'property' || node.type === 'field' || node.type === 'method') {
        // Check if it's explicitly marked as private or protected
        const memberName = node.name.includes('.') ? node.name.split('.').pop() : node.name;
        const privatePattern = new RegExp(`private\\s+${memberName}\\b`);
        const protectedPattern = new RegExp(`protected\\s+${memberName}\\b`);
        
        if (privatePattern.test(sourceContent) || protectedPattern.test(sourceContent)) {
          return false;
        }
        // If not explicitly private/protected, it's public
        return true;
      }
      
      // Check for export patterns
      const exportPatterns = [
        new RegExp(`export\\s+class\\s+${node.name}\\b`),
        new RegExp(`export\\s+function\\s+${node.name}\\b`),
        new RegExp(`export\\s+interface\\s+${node.name}\\b`),
        new RegExp(`export\\s+namespace\\s+${node.name}\\b`),
        new RegExp(`export\\s+const\\s+${node.name}\\b`),
        new RegExp(`export\\s+let\\s+${node.name}\\b`),
        new RegExp(`export\\s+var\\s+${node.name}\\b`),
        new RegExp(`export\\s+default\\s+class\\s+${node.name}\\b`),
        new RegExp(`export\\s+default\\s+function\\s+${node.name}\\b`),
        new RegExp(`export\\s*{[^}]*\\b${node.name}\\b[^}]*}`),
      ];
      
      return exportPatterns.some(pattern => pattern.test(sourceContent));
    };


    const getVisibilitySymbol = (visibility?: Visibility, node?: CodeNode,
    rootDir?: string): '+' | '-' | undefined => {
      if (visibility === 'public') return '+';
      if (visibility === 'private') return '-';

      // In TypeScript, class members are public by default.
      if (node && (node.type === 'method' || node.type === 'property' || node.type === 'field')) {
          const source = getSourceContent(node.filePath, rootDir);
          // A simple check to see if it is explicitly private/protected. If not, it's public.
          const line = (source.split('\n')[node.startLine - 1] || '').trim();
          if (!line.startsWith('private') && !line.startsWith('protected')) {
            return '+';
          }
      }

      // If repograph doesn't provide visibility info, infer it from source for other types
      if (node && isExported(node, rootDir)) {
        return '+';
      }

      return undefined;
    };


    const getNodeSymbol = (node: CodeNode): ScnSymbol => {
      // Heuristic: Treat PascalCase functions as components (e.g., React)
      if ((node.type === 'function' || node.type === 'arrow_function') && /^[A-Z]/.test(node.name)) {
        return '◇';
      }
      // Heuristic: Treat uppercase constants/variables as containers (module pattern)
      if ((node.type === 'variable' || node.type === 'constant') && /^[A-Z]/.test(node.name)) {
        return '◇';
      }
      return ENTITY_TYPE_TO_SYMBOL[node.type] ?? '?';
    };


    const getQualifiers = (node: CodeNode, rootDir?: string): { access?: '+' |
    '-'; others: QualifierSymbol[] } => {
      const qualifiers: { access?: '+' | '-'; others: QualifierSymbol[] } = { others: [] };
      const visibilitySymbol = getVisibilitySymbol(node.visibility, node, rootDir);
      if (visibilitySymbol) qualifiers.access = visibilitySymbol;

      const others: QualifierSymbol[] = [];
      if (node.isAsync) others.push('...');
      if (node.canThrow) others.push('!');
      if (node.isPure) others.push('o');
      qualifiers.others = others;
      
      return qualifiers;
    };


    const formatCssIntents = (intents: readonly CssIntent[] = []): string => {
      if (intents.length === 0) return '';
      // Sort intents alphabetically first, then map to symbols
      const sortedIntents = [...intents].sort();
      const symbols = sortedIntents.map(intent => CSS_INTENT_TO_SYMBOL[intent] ?? '');
      return `{ ${symbols.join(' ')} }`;
    };


    const formatFunctionSignature = (snippet: string): string => {
      // Find parameters part, e.g., (a: string, b: number)
      const paramsMatch = snippet.match(/\(([^)]*)\)/);
      let params = '()';
      if (paramsMatch) {
        // Replace type annotations with #
        const paramContent = paramsMatch[1].replace(/:[^\,)]+/g, ': #');
        params = `(${paramContent})`;
      }

      // Find return type, e.g., ): string
      const returnMatch = snippet.match(/\)\s*:\s*([\w\.<>\[\]\| &]+)/);
      let returnType = '';
      if (returnMatch && returnMatch[1]) {
        const type = returnMatch[1].trim();
        if (type !== 'void' && type !== 'any' && type !== 'unknown') {
           returnType = `: #${type}`;
        }
      }

      return `${params}${returnType}`;
    }


    const formatJsxAttributes = (snippet: string): string => {
        const attrs = [];
        const idMatch = snippet.match(/id="([^"]+)"/);
        if (idMatch) attrs.push(`id:#${idMatch[1]}`);
        
        const classMatch = snippet.match(/className="([^"]+)"/);
        if (classMatch) {
            const classes = classMatch[1].split(' ').map(c => `.${c}`).join(' ');
            attrs.push(`class:${classes}`);
        }
        
        return attrs.length > 0 ? ` [ ${attrs.join(' ')} ]` : '';
    }


    const formatSignature = (node: CodeNode): string => {
      const isComponent = (node.type === 'function' || node.type === 'arrow_function') && /^[A-Z]/.test(node.name);

      if (isComponent && node.codeSnippet) {
        const propMatch = node.codeSnippet.match(/\(\s*\{([^}]+)\}/);
        if (propMatch) {
          const props = propMatch[1].split(',').map(p => p.trim().split(/[:=]/)[0].trim()).filter(Boolean);
          const propsString = props.map(p => `${p}:#`).join(', ');
          return `{ props: { ${propsString} } }`;
        }
        return ''; // Component with no destructured props
      }

      // For functions, format as name() instead of showing full code snippet
      if ((node.type === 'function' || node.type === 'method' || node.type === 'constructor' || node.type === 'arrow_function') && node.codeSnippet) {
        return formatFunctionSignature(node.codeSnippet);
      }
      
      // For JSX/HTML elements, show attributes
      if (node.type === 'html_element' && node.codeSnippet) {
        return formatJsxAttributes(node.codeSnippet);
      }

      // For CSS rules, show intents
      if (node.type === 'css_rule' && node.cssIntents) {
        return formatCssIntents(node.cssIntents);
      }

      // For type aliases, show the aliased type
      if (node.type === 'type' && node.codeSnippet) {
         const match = node.codeSnippet.match(/=\s*(.+);?/);
         return match ? `= ${match[1].trim().replace(/;$/, '')}` : '';
      }

      // For variables/constants, show the value if it's simple
      if ((node.type === 'variable' || node.type === 'constant') && node.codeSnippet) {
        // For uppercase constants that are treated as modules (◇ symbol), show different formatting
        if (/^[A-Z]/.test(node.name)) {
          // If it's an object literal, show it without = prefix (module pattern)
          if (node.codeSnippet.startsWith('{') && node.codeSnippet.endsWith('}')) {
            return node.codeSnippet;
          }
        }
        
        // For regular variables/constants, add = prefix if needed
        if (!node.codeSnippet.includes('=')) {
          return `= ${node.codeSnippet}`;
        }
        // Extract simple values like "123", "'value'", etc.
        const match = node.codeSnippet.match(/=\s*(.+)$/);
        if (match && match[1]) {
          return `= ${match[1].trim()}`;
        }
        // If no assignment found, just return the snippet
        return node.codeSnippet;
      }
      
      // For other container types, show their code snippet if available
      if (node.codeSnippet && (node.type === 'class' || node.type === 'interface' || node.type === 'namespace')) {
        return node.codeSnippet;
      }
      
      return '';
    };


    const formatNode = (node: CodeNode, graph: RankedCodeGraph, idManager:
    ScnIdManager, rootDir?: string, level = 0): string => {
      const symbol = getNodeSymbol(node);
      const { access, others } = getQualifiers(node, rootDir);
      const signature = formatSignature(node);
      const scnId = idManager.getScnId(node.id);
      const id = scnId ? `(${scnId})` : '';
      const indent = '  '.repeat(level + 1);

      // Build the main line: qualifiers symbol id name signature
      const parts = [];
      if (access) parts.push(access);
      parts.push(symbol);
      if (id) parts.push(id);

      // For functions, combine name and signature without space, unless it's a component
      const isComponent = (node.type === 'function' || node.type === 'arrow_function') && /^[A-Z]/.test(node.name);
      if ((node.type === 'function' || node.type === 'method' || node.type === 'constructor' || node.type === 'arrow_function') && !isComponent) {
        const displayName = node.name.includes('.') ? node.name.split('.').pop() || node.name : node.name;
        parts.push(displayName + signature);
      } else {
        const displayName = (node.type === 'property' || node.type === 'field' || node.type === 'html_element') && node.name.includes('.')
          ? node.name.split('.').pop() || node.name
          : node.name;
        parts.push(displayName);
        if (signature) parts.push(signature);
      }

      let mainLine = indent + parts.join(' ');
      if (others.length > 0) {
        mainLine += ` ${others.sort().join(' ')}`;
      }

      const formatLinks = (prefix: string, edges: readonly CodeEdge[]): string => {
        if (edges.length === 0) return '';
        const links = edges.map((edge: CodeEdge) => {
          const isCallerLink = prefix === '<-';
          const targetRepographId = isCallerLink ? edge.fromId : edge.toId;
          const targetNode = graph.nodes.get(targetRepographId);
          let targetScnId = idManager.getScnId(targetRepographId);

          // Per spec, file-level dependencies use a .0 suffix.
          // This applies if the target of the link is a file itself.
          if (targetNode?.type === 'file') {
            targetScnId = `${targetScnId}.0`;
          }
          return `(${targetScnId})`;
        }).filter(Boolean).sort().join(', ');

        if (!links) return '';
        return `\n${indent}  ${prefix} ${links}`;
      };

      const dependencyEdges = (graph.edges as CodeEdge[]).filter(edge => edge.fromId === node.id && edge.type !== 'contains');
      const callerEdges = (graph.edges as CodeEdge[]).filter(edge => edge.toId === node.id && edge.type !== 'imports' && edge.type !== 'contains');

      return mainLine + formatLinks('->', dependencyEdges) + formatLinks('<-', callerEdges);
    };


    const serializeFile = (
      fileNode: CodeNode,
      symbols: CodeNode[],
      graph: RankedCodeGraph,
      idManager: ScnIdManager,
      rootDir?: string
    ): string => {
      const scnId = idManager.getScnId(fileNode.id) ?? '';

      const formatFileLinks = (prefix: string, edges: readonly CodeEdge[]): string => {
        if (edges.length === 0) return '';
        const links = edges.map((edge: CodeEdge) => {
          const targetId = prefix === '->' ? edge.toId : edge.fromId;
          const targetScnId = idManager.getScnId(targetId);
          return `(${targetScnId}.0)`;
        }).sort().join(', ');
        if (!links) return '';
        return `\n  ${prefix} ${links}`;
      };

      const fileDependencies = graph.edges.filter(e => e.type === 'imports' && e.fromId === fileNode.id);
      const fileCallers = graph.edges.filter(e => e.type === 'imports' && e.toId === fileNode.id);

        const formattedPath = fileNode.filePath.includes(' ') ? `"${fileNode.filePath}"` : fileNode.filePath;
        let header = `§ (${scnId}) ${formattedPath}`;
      const fileDepLine = formatFileLinks('->', fileDependencies);
      if (fileDepLine) header += fileDepLine;
      const fileCallerLine = formatFileLinks('<-', fileCallers);
      if (fileCallerLine) header += fileCallerLine;

      // Hierarchical rendering
      const nodeWrappers = symbols.map(s => ({ node: s, children: [] as {node: CodeNode, children: any[]}[] })).sort((a,b) => a.node.startLine - b.node.startLine);
      const nodeMap = new Map(nodeWrappers.map(w => [w.node.id, w]));
      const topLevelSymbols: typeof nodeWrappers = [];

      for (let i = 0; i < nodeWrappers.length; i++) {
        const currentWrapper = nodeWrappers[i];
        let parentWrapper = null;
        
        // Find the tightest parent by looking backwards through the sorted list
        for (let j = i - 1; j >= 0; j--) {
            const potentialParentWrapper = nodeWrappers[j];
            if (currentWrapper.node.startLine >= potentialParentWrapper.node.startLine && currentWrapper.node.endLine <= potentialParentWrapper.node.endLine) {
                parentWrapper = potentialParentWrapper;
                break;
            }
        }
        
        if (parentWrapper) {
            parentWrapper.children.push(currentWrapper);
        } else {
            topLevelSymbols.push(currentWrapper);
        }
      }

      const nodeLines: string[] = [];
      const processNode = (wrapper: {node: CodeNode, children: any[]}, level: number) => {
        nodeLines.push(formatNode(wrapper.node, graph, idManager, rootDir, level));
        for (const childWrapper of wrapper.children) {
          processNode(childWrapper, level + 1);
        }
      };

      for (const wrapper of topLevelSymbols) {
        processNode(wrapper, 0);
      }

      return [header, ...nodeLines].join('\n');
    };


    /**
     * Serializes a RankedCodeGraph into the SCN text format.
     * This function is the core rendering layer of `scn-ts`.
     *
     * @param graph - The `RankedCodeGraph` produced by `repograph`.
     * @param rootDir - The root directory of the project (for reading source files).
     * @returns A string containing the full SCN map.
     */
    export const serializeGraph = (graph: RankedCodeGraph, rootDir?: string):
    string => {
      const nodesByFile = new Map<string, CodeNode[]>(); // filePath -> nodes
      const fileNodes: CodeNode[] = [];

      for (const node of graph.nodes.values()) {
        if (node.type === 'file') {
          fileNodes.push(node);
          nodesByFile.set(node.filePath, []);
        } else {
          if (!nodesByFile.has(node.filePath)) {
            // This case can happen if repograph finds an entity but not its parent file.
            // We'll create a dummy map entry, but it won't be processed without a file node.
            nodesByFile.set(node.filePath, []); 
          }
          nodesByFile.get(node.filePath)!.push(node);
        }
      }

      const sortedFileNodes = fileNodes.sort((a, b) => a.filePath.localeCompare(b.filePath));
      const idManager = new ScnIdManager(sortedFileNodes, nodesByFile);

      const scnParts = sortedFileNodes.map(fileNode => {
        const symbols = nodesByFile.get(fileNode.filePath) || [];
        // Sort symbols by line number to ensure deterministic output for hierarchical processing
        symbols.sort((a,b) => a.startLine - b.startLine);
        return serializeFile(fileNode, symbols, graph, idManager, rootDir);
      });

      return scnParts.join('\n\n');
    };
  test/ts/integration/programmatic-api.test.ts: >-
    import { describe, it, expect, afterEach } from 'bun:test';

    import { generateScn } from '../../../src/index';

    import { serializeGraph } from '../../../src/serializer';

    import { setupTestProject, type TestProject } from '../../test.util';

    import type { RankedCodeGraph, CodeNode, CodeEdge as RepographEdge } from
    'repograph';

    import { rm } from 'fs/promises';

    import { tmpdir } from 'os';

    import { join } from 'path';


    // Re-define the extended edge type used internally by the serializer

    type CodeEdge = Omit<RepographEdge, 'type'> & { type: RepographEdge['type']
    | 'contains' | 'references' };


    describe('SCN Generation: 2. Programmatic API', () => {
      let project: TestProject | undefined;

      afterEach(async () => {
        if (project) {
          await project.cleanup();
          project = undefined;
        }
      });
      
      describe('2.1 High-Level API (generateScn)', () => {
        it('should generate a valid SCN string given a set of include globs', async () => {
          project = await setupTestProject({
            'a.ts': `export const A = 1;`,
            'b.ts': `export const B = 2;`,
          });

          const scn = await generateScn({ root: project.projectDir, include: ['a.ts'] });
          expect(scn).toContain('§ (1) a.ts');
          expect(scn).not.toContain('b.ts');
        });

        it('should respect exclude patterns', async () => {
          project = await setupTestProject({
            'a.ts': `export const A = 1;`,
            'b.ignore.ts': `export const B = 2;`,
          });

          const scn = await generateScn({
            root: project.projectDir,
            include: ['**/*.ts'],
            exclude: ['**/*.ignore.ts'],
          });
          expect(scn).toContain('§ (1) a.ts');
          expect(scn).not.toContain('b.ignore.ts');
        });

        it('should use the project tsconfig path for better type analysis', async () => {
          project = await setupTestProject({
            'Button.tsx': `export const Button = () => <button>Click</button>;`,
            'tsconfig.json': JSON.stringify({
                "compilerOptions": { "jsx": "react-jsx" },
            }),
          });

          const scn = await generateScn({
            root: project.projectDir,
            include: ['**/*.tsx'],
            project: 'tsconfig.json',
          });
          
          // Correct parsing of JSX depends on tsconfig.json
          expect(scn).toContain('§ (1) Button.tsx');
          expect(scn).toContain('+ ◇ (1.1) Button()');
          expect(scn).toContain('⛶ (1.2) button');
        });

        it('should return an empty string for globs that match no files', async () => {
          project = await setupTestProject({
            'a.ts': `export const A = 1;`,
          });
          const scn = await generateScn({ root: project.projectDir, include: ['**/*.js'] });
          expect(scn).toBe('');
        });

        it('should throw an error for non-existent root directory', async () => {
            const nonExistentDir = join(tmpdir(), 'scn-ts-non-existent-dir-test');
            await rm(nonExistentDir, { recursive: true, force: true }).catch(() => {});
            
            const promise = generateScn({ root: nonExistentDir, include: ['**/*.ts'] });
            
            // repograph is expected to throw when the root path does not exist.
            await expect(promise).rejects.toThrow();
        });
      });

      describe('2.2 Low-Level API (serializeGraph)', () => {
        it('should serialize a resolved graph into spec-compliant SCN string', () => {
            const fileNodeA: CodeNode = { id: 'file-a', filePath: 'a.ts', type: 'file', name: 'a.ts', startLine: 1, endLine: 1, codeSnippet: '', };
            const funcNodeA: CodeNode = { id: 'func-a', filePath: 'a.ts', type: 'function', name: 'funcA', visibility: 'public', startLine: 2, endLine: 2, codeSnippet: 'function funcA()', };
            const fileNodeB: CodeNode = { id: 'file-b', filePath: 'b.ts', type: 'file', name: 'b.ts', startLine: 1, endLine: 1, codeSnippet: '', };
            const funcNodeB: CodeNode = { id: 'func-b', filePath: 'b.ts', type: 'function', name: 'funcB', visibility: 'public', startLine: 2, endLine: 2, codeSnippet: 'function funcB()', };

            const nodes = new Map<string, CodeNode>([
                [fileNodeA.id, fileNodeA],
                [funcNodeA.id, funcNodeA],
                [fileNodeB.id, fileNodeB],
                [funcNodeB.id, funcNodeB],
            ]);
            
            const edges: CodeEdge[] = [
                // File A imports File B
                { fromId: 'file-a', toId: 'file-b', type: 'imports' },
                // funcA calls funcB
                { fromId: 'func-a', toId: 'func-b', type: 'references' },
            ];

            const graph: RankedCodeGraph = { nodes, edges };

            const scnOutput = serializeGraph(graph);
            
            const expectedScn = [
                '§ (1) a.ts\n  -> (2.0)\n  + ~ (1.1) funcA()\n    -> (2.1)',
                '§ (2) b.ts\n  <- (1.0)\n  + ~ (2.1) funcB()\n    <- (1.1)'
            ].join('\n\n');
            
            expect(scnOutput).toBe(expectedScn);
        });
      });
    });
approved: true
